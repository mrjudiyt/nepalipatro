package com.google.android.gms.measurement.internal;

import android.content.Context;
import com.facebook.internal.NativeProtocol;
import com.google.android.gms.internal.measurement.zzfy;
import com.google.android.gms.internal.measurement.zzgk;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/* compiled from: com.google.android.gms:play-services-measurement-impl@@21.5.0 */
public final class zzbi {
    public static final zzfi<Long> zza = zza("measurement.ad_id_cache_time", 10000L, 10000L, zzbk.zza);
    public static final zzfi<Long> zzaa = zza("measurement.upload.initial_upload_delay_time", 15000L, 15000L, zzbt.zza);
    public static final zzfi<Long> zzab = zza("measurement.upload.retry_time", 1800000L, 1800000L, zzbv.zza);
    public static final zzfi<Integer> zzac = zza("measurement.upload.retry_count", 6, 6, zzby.zza);
    public static final zzfi<Long> zzad = zza("measurement.upload.max_queue_time", 2419200000L, 2419200000L, zzbx.zza);
    public static final zzfi<Integer> zzae = zza("measurement.lifetimevalue.max_currency_tracked", 4, 4, zzbz.zza);
    public static final zzfi<Integer> zzaf = zza("measurement.audience.filter_result_max_count", 200, 200, zzcc.zza);
    public static final zzfi<Integer> zzag = zza("measurement.upload.max_public_user_properties", 25, 25, (zzfg) null);
    public static final zzfi<Integer> zzah = zza("measurement.upload.max_event_name_cardinality", 500, 500, (zzfg) null);
    public static final zzfi<Integer> zzai = zza("measurement.upload.max_public_event_params", 25, 25, (zzfg) null);
    public static final zzfi<Long> zzaj = zza("measurement.service_client.idle_disconnect_millis", 5000L, 5000L, zzcb.zza);
    public static final zzfi<Boolean> zzak;
    public static final zzfi<String> zzal = zza("measurement.test.string_flag", "---", "---", zzcd.zza);
    public static final zzfi<Long> zzam = zza("measurement.test.long_flag", -1L, -1L, zzcg.zza);
    public static final zzfi<Integer> zzan = zza("measurement.test.int_flag", -2, -2, zzci.zza);
    public static final zzfi<Double> zzao;
    public static final zzfi<Integer> zzap = zza("measurement.experiment.max_ids", 50, 50, zzck.zza);
    public static final zzfi<Integer> zzaq = zza("measurement.upload.max_item_scoped_custom_parameters", 27, 27, zzcj.zza);
    public static final zzfi<Integer> zzar = zza("measurement.max_bundles_per_iteration", 100, 100, zzco.zza);
    public static final zzfi<Long> zzas = zza("measurement.sdk.attribution.cache.ttl", 604800000L, 604800000L, zzcn.zza);
    public static final zzfi<Long> zzat = zza("measurement.redaction.app_instance_id.ttl", 7200000L, 7200000L, zzcq.zza);
    public static final zzfi<Integer> zzau = zza("measurement.rb.attribution.client.min_ad_services_version", 7, 7, zzcp.zza);
    public static final zzfi<String> zzav = zza("measurement.rb.attribution.uri_scheme", "https", "https", zzcr.zza);
    public static final zzfi<String> zzaw = zza("measurement.rb.attribution.uri_authority", "google-analytics.com", "google-analytics.com", zzcu.zza);
    public static final zzfi<String> zzax = zza("measurement.rb.attribution.uri_path", "privacy-sandbox/register-app-conversion", "privacy-sandbox/register-app-conversion", zzct.zza);
    public static final zzfi<String> zzay = zza("measurement.rb.attribution.app_allowlist", "com.labpixies.flood,", "com.labpixies.flood,", zzcw.zza);
    public static final zzfi<String> zzaz = zza("measurement.rb.attribution.user_properties", "_npa,npa", "_npa,npa", zzcv.zza);
    public static final zzfi<Long> zzb = zza("measurement.app_uninstalled_additional_ad_id_cache_time", 3600000L, 3600000L, zzbo.zza);
    public static final zzfi<String> zzba = zza("measurement.rb.attribution.event_params", "value|currency", "value|currency", zzcx.zza);
    public static final zzfi<String> zzbb = zza("measurement.rb.attribution.query_parameters_to_remove", "", "", zzda.zza);
    public static final zzfi<Boolean> zzbc;
    public static final zzfi<Boolean> zzbd;
    public static final zzfi<Boolean> zzbe;
    public static final zzfi<Boolean> zzbf;
    public static final zzfi<Boolean> zzbg;
    public static final zzfi<Boolean> zzbh;
    public static final zzfi<Boolean> zzbi;
    public static final zzfi<Boolean> zzbj;
    public static final zzfi<Boolean> zzbk;
    public static final zzfi<Boolean> zzbl;
    public static final zzfi<Boolean> zzbm;
    public static final zzfi<Boolean> zzbn;
    public static final zzfi<Integer> zzbo = zza("measurement.service.storage_consent_support_version", 203600, 203600, zzdn.zza);
    public static final zzfi<Boolean> zzbp;
    public static final zzfi<Boolean> zzbq;
    public static final zzfi<Boolean> zzbr;
    public static final zzfi<Boolean> zzbs;
    public static final zzfi<Boolean> zzbt;
    public static final zzfi<Boolean> zzbu;
    public static final zzfi<Boolean> zzbv;
    public static final zzfi<Boolean> zzbw;
    public static final zzfi<Boolean> zzbx;
    public static final zzfi<Boolean> zzby;
    public static final zzfi<Boolean> zzbz;
    public static final zzfi<Long> zzc = zza("measurement.monitoring.sample_period_millis", 86400000L, 86400000L, zzca.zza);
    public static final zzfi<Boolean> zzca;
    public static final zzfi<Boolean> zzcb;
    public static final zzfi<Boolean> zzcc;
    public static final zzfi<Boolean> zzcd;
    public static final zzfi<Boolean> zzce;
    public static final zzfi<Boolean> zzcf;
    public static final zzfi<Boolean> zzcg;
    public static final zzfi<Boolean> zzch;
    public static final zzfi<Boolean> zzci;
    public static final zzfi<Boolean> zzcj;
    public static final zzfi<Boolean> zzck;
    public static final zzfi<Boolean> zzcl;
    public static final zzfi<Boolean> zzcm;
    public static final zzfi<Boolean> zzcn;
    public static final zzfi<Boolean> zzco;
    public static final zzfi<Boolean> zzcp;
    public static final zzfi<Boolean> zzcq;
    public static final zzfi<Boolean> zzcr;
    public static final zzfi<Boolean> zzcs;
    public static final zzfi<Boolean> zzct;
    public static zzfi<Boolean> zzcu;
    /* access modifiers changed from: private */
    public static final List<zzfi<?>> zzcv = Collections.synchronizedList(new ArrayList());
    private static final Set<zzfi<?>> zzcw = Collections.synchronizedSet(new HashSet());
    private static final zzfi<Integer> zzcx = zza("measurement.upload.max_event_parameter_value_length", 100, 100, zzcl.zza);
    private static final zzfi<Boolean> zzcy;
    private static final zzfi<Boolean> zzcz;
    public static final zzfi<Long> zzd = zza("measurement.config.cache_time", 86400000L, 3600000L, zzcm.zza);
    private static final zzfi<Boolean> zzda;
    private static final zzfi<Boolean> zzdb;
    public static final zzfi<String> zze = zza("measurement.config.url_scheme", "https", "https", zzcy.zza);
    public static final zzfi<String> zzf = zza("measurement.config.url_authority", "app-measurement.com", "app-measurement.com", zzdk.zza);
    public static final zzfi<Integer> zzg = zza("measurement.upload.max_bundles", 100, 100, zzdw.zza);
    public static final zzfi<Integer> zzh;
    public static final zzfi<Integer> zzi;
    public static final zzfi<Integer> zzj = zza("measurement.upload.max_events_per_bundle", 1000, 1000, zzbm.zza);
    public static final zzfi<Integer> zzk = zza("measurement.upload.max_events_per_day", 100000, 100000, zzbw.zza);
    public static final zzfi<Integer> zzl = zza("measurement.upload.max_error_events_per_day", 1000, 1000, zzcf.zza);
    public static final zzfi<Integer> zzm = zza("measurement.upload.max_public_events_per_day", 50000, 50000, zzcs.zza);
    public static final zzfi<Integer> zzn = zza("measurement.upload.max_conversions_per_day", 10000, 10000, zzdb.zza);
    public static final zzfi<Integer> zzo = zza("measurement.upload.max_realtime_events_per_day", 10, 10, zzdo.zza);
    public static final zzfi<Integer> zzp = zza("measurement.store.max_stored_events_per_app", 100000, 100000, zzdx.zza);
    public static final zzfi<String> zzq = zza("measurement.upload.url", "https://app-measurement.com/a", "https://app-measurement.com/a", zzek.zza);
    public static final zzfi<Long> zzr = zza("measurement.upload.backoff_period", 43200000L, 43200000L, zzet.zza);
    public static final zzfi<Long> zzs = zza("measurement.upload.window_interval", 3600000L, 3600000L, zzbj.zza);
    public static final zzfi<Long> zzt = zza("measurement.upload.interval", 3600000L, 3600000L, zzbl.zza);
    public static final zzfi<Long> zzu = zza("measurement.upload.realtime_upload_interval", 10000L, 10000L, zzbn.zza);
    public static final zzfi<Long> zzv = zza("measurement.upload.debug_upload_interval", 1000L, 1000L, zzbq.zza);
    public static final zzfi<Long> zzw = zza("measurement.upload.minimum_delay", 500L, 500L, zzbp.zza);
    public static final zzfi<Long> zzx = zza("measurement.alarm_manager.minimum_interval", 60000L, 60000L, zzbs.zza);
    public static final zzfi<Long> zzy = zza("measurement.upload.stale_data_deletion_interval", 86400000L, 86400000L, zzbr.zza);
    public static final zzfi<Long> zzz = zza("measurement.upload.refresh_blacklisted_config_interval", 604800000L, 604800000L, zzbu.zza);

    static {
        Integer valueOf = Integer.valueOf(NativeProtocol.MESSAGE_GET_ACCESS_TOKEN_REQUEST);
        zzh = zza("measurement.upload.max_batch_size", valueOf, valueOf, zzei.zza);
        zzi = zza("measurement.upload.max_bundle_size", valueOf, valueOf, zzeu.zza);
        Boolean bool = Boolean.FALSE;
        zzak = zza("measurement.test.boolean_flag", bool, bool, zzce.zza);
        Double valueOf2 = Double.valueOf(-3.0d);
        zzao = zza("measurement.test.double_flag", valueOf2, valueOf2, zzch.zza);
        Boolean bool2 = Boolean.TRUE;
        zzbc = zza("measurement.collection.log_event_and_bundle_v2", bool2, bool2, zzcz.zza);
        zzbd = zza("measurement.quality.checksum", bool, bool, (zzfg) null);
        zzbe = zza("measurement.audience.use_bundle_end_timestamp_for_non_sequence_property_filters", bool, bool, zzdc.zza);
        zzbf = zza("measurement.audience.refresh_event_count_filters_timestamp", bool, bool, zzde.zza);
        zzbg = zza("measurement.audience.use_bundle_timestamp_for_event_count_filters", bool, bool, zzdd.zza);
        zzbh = zza("measurement.sdk.collection.retrieve_deeplink_from_bow_2", bool2, bool2, zzdg.zza);
        zzbi = zza("measurement.sdk.collection.last_deep_link_referrer_campaign2", bool, bool, zzdf.zza);
        zzbj = zza("measurement.lifecycle.app_in_background_parameter", bool, bool, zzdi.zza);
        zzbk = zza("measurement.integration.disable_firebase_instance_id", bool, bool, zzdh.zza);
        zzbl = zza("measurement.collection.service.update_with_analytics_fix", bool, bool, zzdj.zza);
        zzbm = zza("measurement.client.firebase_feature_rollout.v1.enable", bool2, bool2, zzdm.zza);
        zzbn = zza("measurement.client.sessions.check_on_reset_and_enable2", bool2, bool2, zzdl.zza);
        zzcy = zza("measurement.client.click_identifier_control.dev", bool, bool, zzdq.zza);
        zzcz = zza("measurement.service.click_identifier_control", bool, bool, zzdp.zza);
        zzbp = zza("measurement.service.store_null_safelist", bool2, bool2, zzds.zza);
        zzbq = zza("measurement.service.store_safelist", bool2, bool2, zzdr.zza);
        zzbr = zza("measurement.collection.enable_session_stitching_token.first_open_fix", bool2, bool2, zzdu.zza);
        zzbs = zza("measurement.collection.enable_session_stitching_token.client.dev", bool2, bool2, zzdt.zza);
        zzbt = zza("measurement.session_stitching_token_enabled", bool, bool, zzdv.zza);
        zzda = zza("measurement.sgtm.client.dev", bool, bool, zzdy.zza);
        zzbu = zza("measurement.sgtm.service", bool, bool, zzea.zza);
        zzbv = zza("measurement.redaction.retain_major_os_version", bool2, bool2, zzdz.zza);
        zzbw = zza("measurement.redaction.scion_payload_generator", bool2, bool2, zzec.zza);
        zzbx = zza("measurement.sessionid.enable_client_session_id", bool2, bool2, zzeb.zza);
        zzby = zza("measurement.sfmc.client", bool2, bool2, zzee.zza);
        zzbz = zza("measurement.sfmc.service", bool2, bool2, zzed.zza);
        zzca = zza("measurement.gmscore_feature_tracking", bool2, bool2, zzeg.zza);
        zzcb = zza("measurement.fix_health_monitor_stack_trace", bool2, bool2, zzef.zza);
        zzcc = zza("measurement.item_scoped_custom_parameters.client", bool2, bool2, zzeh.zza);
        zzcd = zza("measurement.item_scoped_custom_parameters.service", bool, bool, zzej.zza);
        zzce = zza("measurement.remove_app_background.client", bool, bool, zzem.zza);
        zzcf = zza("measurement.rb.attribution.service", bool, bool, zzel.zza);
        zzcg = zza("measurement.rb.attribution.client2", bool, bool, zzeo.zza);
        zzch = zza("measurement.rb.attribution.uuid_generation", bool2, bool2, zzen.zza);
        zzci = zza("measurement.rb.attribution.enable_trigger_redaction", bool2, bool2, zzeq.zza);
        zzdb = zza("measurement.rb.attribution.followup1.service", bool, bool, zzep.zza);
        zzcj = zza("measurement.client.sessions.enable_fix_background_engagement", bool, bool, zzes.zza);
        zzck = zza("measurement.client.ad_id_consent_fix", bool2, bool2, zzer.zza);
        zzcl = zza("measurement.dma_consent.client", bool, bool, zzew.zza);
        zzcm = zza("measurement.dma_consent.service", bool, bool, zzev.zza);
        zzcn = zza("measurement.dma_consent.client_bow_check", bool, bool, zzey.zza);
        zzco = zza("measurement.dma_consent.service_gcs_v2", bool, bool, zzex.zza);
        zzcp = zza("measurement.dma_consent.service_npa_remote_default", bool, bool, zzfa.zza);
        zzcq = zza("measurement.dma_consent.service_split_batch_on_consent", bool, bool, zzez.zza);
        zzcr = zza("measurement.service.deferred_first_open", bool, bool, zzfc.zza);
        zzcs = zza("measurement.gbraid_campaign.gbraid.client.dev", bool, bool, zzfb.zza);
        zzct = zza("measurement.gbraid_campaign.gbraid.service", bool, bool, zzfe.zza);
        zzcu = zza("measurement.increase_param_lengths", bool, bool, zzfd.zza);
    }

    private static <V> zzfi<V> zza(String str, V v10, V v11, zzfg<V> zzfg) {
        zzfi zzfi = new zzfi(str, v10, v11, zzfg);
        zzcv.add(zzfi);
        return zzfi;
    }

    public static Map<String, String> zza(Context context) {
        zzfy zza2 = zzfy.zza(context.getContentResolver(), zzgk.zza("com.google.android.gms.measurement"), zzbh.zza);
        return zza2 == null ? Collections.emptyMap() : zza2.zza();
    }
}
